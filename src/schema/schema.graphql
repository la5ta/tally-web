schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# columns and relationships of "carts"
type carts {
  created_at: timestamptz!
  id: uuid!
  product_id: uuid!
  updated_at: timestamptz!
  user_id: uuid!
}

# aggregated selection of "carts"
type carts_aggregate {
  aggregate: carts_aggregate_fields
  nodes: [carts!]!
}

# aggregate fields of "carts"
type carts_aggregate_fields {
  count(columns: [carts_select_column!], distinct: Boolean): Int
  max: carts_max_fields
  min: carts_min_fields
}

# order by aggregate values of table "carts"
input carts_aggregate_order_by {
  count: order_by
  max: carts_max_order_by
  min: carts_min_order_by
}

# input type for inserting array relation for remote table "carts"
input carts_arr_rel_insert_input {
  data: [carts_insert_input!]!
  on_conflict: carts_on_conflict
}

# Boolean expression to filter rows from the table "carts". All fields are combined with a logical 'AND'.
input carts_bool_exp {
  _and: [carts_bool_exp]
  _not: carts_bool_exp
  _or: [carts_bool_exp]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  product_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

# unique or primary key constraints on table "carts"
enum carts_constraint {
  # unique or primary key constraint
  carts_pkey
}

# input type for inserting data into table "carts"
input carts_insert_input {
  created_at: timestamptz
  id: uuid
  product_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# aggregate max on columns
type carts_max_fields {
  created_at: timestamptz
  id: uuid
  product_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# order by max() on columns of table "carts"
input carts_max_order_by {
  created_at: order_by
  id: order_by
  product_id: order_by
  updated_at: order_by
  user_id: order_by
}

# aggregate min on columns
type carts_min_fields {
  created_at: timestamptz
  id: uuid
  product_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# order by min() on columns of table "carts"
input carts_min_order_by {
  created_at: order_by
  id: order_by
  product_id: order_by
  updated_at: order_by
  user_id: order_by
}

# response of any mutation on the table "carts"
type carts_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [carts!]!
}

# input type for inserting object relation for remote table "carts"
input carts_obj_rel_insert_input {
  data: carts_insert_input!
  on_conflict: carts_on_conflict
}

# on conflict condition type for table "carts"
input carts_on_conflict {
  constraint: carts_constraint!
  update_columns: [carts_update_column!]!
  where: carts_bool_exp
}

# ordering options when selecting data from "carts"
input carts_order_by {
  created_at: order_by
  id: order_by
  product_id: order_by
  updated_at: order_by
  user_id: order_by
}

# primary key columns input for table: "carts"
input carts_pk_columns_input {
  id: uuid!
}

# select columns of table "carts"
enum carts_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  product_id

  # column name
  updated_at

  # column name
  user_id
}

# input type for updating data in table "carts"
input carts_set_input {
  created_at: timestamptz
  id: uuid
  product_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# update columns of table "carts"
enum carts_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  product_id

  # column name
  updated_at

  # column name
  user_id
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# mutation root
type mutation_root {
  # delete data from the table: "carts"
  delete_carts(
    # filter the rows which have to be deleted
    where: carts_bool_exp!
  ): carts_mutation_response

  # delete single row from the table: "carts"
  delete_carts_by_pk(id: uuid!): carts

  # delete data from the table: "order_item"
  delete_order_item(
    # filter the rows which have to be deleted
    where: order_item_bool_exp!
  ): order_item_mutation_response

  # delete single row from the table: "order_item"
  delete_order_item_by_pk(id: uuid!): order_item

  # delete data from the table: "orders"
  delete_orders(
    # filter the rows which have to be deleted
    where: orders_bool_exp!
  ): orders_mutation_response

  # delete single row from the table: "orders"
  delete_orders_by_pk(id: uuid!): orders

  # delete data from the table: "products"
  delete_products(
    # filter the rows which have to be deleted
    where: products_bool_exp!
  ): products_mutation_response

  # delete single row from the table: "products"
  delete_products_by_pk(id: uuid!): products

  # delete data from the table: "users"
  delete_users(
    # filter the rows which have to be deleted
    where: users_bool_exp!
  ): users_mutation_response

  # delete single row from the table: "users"
  delete_users_by_pk(id: uuid!): users

  # insert data into the table: "carts"
  insert_carts(
    # the rows to be inserted
    objects: [carts_insert_input!]!

    # on conflict condition
    on_conflict: carts_on_conflict
  ): carts_mutation_response

  # insert a single row into the table: "carts"
  insert_carts_one(
    # the row to be inserted
    object: carts_insert_input!

    # on conflict condition
    on_conflict: carts_on_conflict
  ): carts

  # insert data into the table: "order_item"
  insert_order_item(
    # the rows to be inserted
    objects: [order_item_insert_input!]!

    # on conflict condition
    on_conflict: order_item_on_conflict
  ): order_item_mutation_response

  # insert a single row into the table: "order_item"
  insert_order_item_one(
    # the row to be inserted
    object: order_item_insert_input!

    # on conflict condition
    on_conflict: order_item_on_conflict
  ): order_item

  # insert data into the table: "orders"
  insert_orders(
    # the rows to be inserted
    objects: [orders_insert_input!]!

    # on conflict condition
    on_conflict: orders_on_conflict
  ): orders_mutation_response

  # insert a single row into the table: "orders"
  insert_orders_one(
    # the row to be inserted
    object: orders_insert_input!

    # on conflict condition
    on_conflict: orders_on_conflict
  ): orders

  # insert data into the table: "products"
  insert_products(
    # the rows to be inserted
    objects: [products_insert_input!]!

    # on conflict condition
    on_conflict: products_on_conflict
  ): products_mutation_response

  # insert a single row into the table: "products"
  insert_products_one(
    # the row to be inserted
    object: products_insert_input!

    # on conflict condition
    on_conflict: products_on_conflict
  ): products

  # insert data into the table: "users"
  insert_users(
    # the rows to be inserted
    objects: [users_insert_input!]!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users_mutation_response

  # insert a single row into the table: "users"
  insert_users_one(
    # the row to be inserted
    object: users_insert_input!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users

  # update data of the table: "carts"
  update_carts(
    # sets the columns of the filtered rows to the given values
    _set: carts_set_input

    # filter the rows which have to be updated
    where: carts_bool_exp!
  ): carts_mutation_response

  # update single row of the table: "carts"
  update_carts_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: carts_set_input
    pk_columns: carts_pk_columns_input!
  ): carts

  # update data of the table: "order_item"
  update_order_item(
    # increments the integer columns with given value of the filtered values
    _inc: order_item_inc_input

    # sets the columns of the filtered rows to the given values
    _set: order_item_set_input

    # filter the rows which have to be updated
    where: order_item_bool_exp!
  ): order_item_mutation_response

  # update single row of the table: "order_item"
  update_order_item_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: order_item_inc_input

    # sets the columns of the filtered rows to the given values
    _set: order_item_set_input
    pk_columns: order_item_pk_columns_input!
  ): order_item

  # update data of the table: "orders"
  update_orders(
    # sets the columns of the filtered rows to the given values
    _set: orders_set_input

    # filter the rows which have to be updated
    where: orders_bool_exp!
  ): orders_mutation_response

  # update single row of the table: "orders"
  update_orders_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: orders_set_input
    pk_columns: orders_pk_columns_input!
  ): orders

  # update data of the table: "products"
  update_products(
    # increments the integer columns with given value of the filtered values
    _inc: products_inc_input

    # sets the columns of the filtered rows to the given values
    _set: products_set_input

    # filter the rows which have to be updated
    where: products_bool_exp!
  ): products_mutation_response

  # update single row of the table: "products"
  update_products_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: products_inc_input

    # sets the columns of the filtered rows to the given values
    _set: products_set_input
    pk_columns: products_pk_columns_input!
  ): products

  # update data of the table: "users"
  update_users(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input

    # filter the rows which have to be updated
    where: users_bool_exp!
  ): users_mutation_response

  # update single row of the table: "users"
  update_users_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

scalar numeric

# expression to compare columns of type numeric. All fields are combined with logical 'AND'.
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# columns and relationships of "order_item"
type order_item {
  created_at: timestamptz!
  id: uuid!
  order_id: uuid!
  price: numeric!
  product_id: uuid!
  updated_at: timestamptz!
  user_id: uuid!
}

# aggregated selection of "order_item"
type order_item_aggregate {
  aggregate: order_item_aggregate_fields
  nodes: [order_item!]!
}

# aggregate fields of "order_item"
type order_item_aggregate_fields {
  avg: order_item_avg_fields
  count(columns: [order_item_select_column!], distinct: Boolean): Int
  max: order_item_max_fields
  min: order_item_min_fields
  stddev: order_item_stddev_fields
  stddev_pop: order_item_stddev_pop_fields
  stddev_samp: order_item_stddev_samp_fields
  sum: order_item_sum_fields
  var_pop: order_item_var_pop_fields
  var_samp: order_item_var_samp_fields
  variance: order_item_variance_fields
}

# order by aggregate values of table "order_item"
input order_item_aggregate_order_by {
  avg: order_item_avg_order_by
  count: order_by
  max: order_item_max_order_by
  min: order_item_min_order_by
  stddev: order_item_stddev_order_by
  stddev_pop: order_item_stddev_pop_order_by
  stddev_samp: order_item_stddev_samp_order_by
  sum: order_item_sum_order_by
  var_pop: order_item_var_pop_order_by
  var_samp: order_item_var_samp_order_by
  variance: order_item_variance_order_by
}

# input type for inserting array relation for remote table "order_item"
input order_item_arr_rel_insert_input {
  data: [order_item_insert_input!]!
  on_conflict: order_item_on_conflict
}

# aggregate avg on columns
type order_item_avg_fields {
  price: Float
}

# order by avg() on columns of table "order_item"
input order_item_avg_order_by {
  price: order_by
}

# Boolean expression to filter rows from the table "order_item". All fields are combined with a logical 'AND'.
input order_item_bool_exp {
  _and: [order_item_bool_exp]
  _not: order_item_bool_exp
  _or: [order_item_bool_exp]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  order_id: uuid_comparison_exp
  price: numeric_comparison_exp
  product_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

# unique or primary key constraints on table "order_item"
enum order_item_constraint {
  # unique or primary key constraint
  order_item_pkey
}

# input type for incrementing integer column in table "order_item"
input order_item_inc_input {
  price: numeric
}

# input type for inserting data into table "order_item"
input order_item_insert_input {
  created_at: timestamptz
  id: uuid
  order_id: uuid
  price: numeric
  product_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# aggregate max on columns
type order_item_max_fields {
  created_at: timestamptz
  id: uuid
  order_id: uuid
  price: numeric
  product_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# order by max() on columns of table "order_item"
input order_item_max_order_by {
  created_at: order_by
  id: order_by
  order_id: order_by
  price: order_by
  product_id: order_by
  updated_at: order_by
  user_id: order_by
}

# aggregate min on columns
type order_item_min_fields {
  created_at: timestamptz
  id: uuid
  order_id: uuid
  price: numeric
  product_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# order by min() on columns of table "order_item"
input order_item_min_order_by {
  created_at: order_by
  id: order_by
  order_id: order_by
  price: order_by
  product_id: order_by
  updated_at: order_by
  user_id: order_by
}

# response of any mutation on the table "order_item"
type order_item_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [order_item!]!
}

# input type for inserting object relation for remote table "order_item"
input order_item_obj_rel_insert_input {
  data: order_item_insert_input!
  on_conflict: order_item_on_conflict
}

# on conflict condition type for table "order_item"
input order_item_on_conflict {
  constraint: order_item_constraint!
  update_columns: [order_item_update_column!]!
  where: order_item_bool_exp
}

# ordering options when selecting data from "order_item"
input order_item_order_by {
  created_at: order_by
  id: order_by
  order_id: order_by
  price: order_by
  product_id: order_by
  updated_at: order_by
  user_id: order_by
}

# primary key columns input for table: "order_item"
input order_item_pk_columns_input {
  id: uuid!
}

# select columns of table "order_item"
enum order_item_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  order_id

  # column name
  price

  # column name
  product_id

  # column name
  updated_at

  # column name
  user_id
}

# input type for updating data in table "order_item"
input order_item_set_input {
  created_at: timestamptz
  id: uuid
  order_id: uuid
  price: numeric
  product_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# aggregate stddev on columns
type order_item_stddev_fields {
  price: Float
}

# order by stddev() on columns of table "order_item"
input order_item_stddev_order_by {
  price: order_by
}

# aggregate stddev_pop on columns
type order_item_stddev_pop_fields {
  price: Float
}

# order by stddev_pop() on columns of table "order_item"
input order_item_stddev_pop_order_by {
  price: order_by
}

# aggregate stddev_samp on columns
type order_item_stddev_samp_fields {
  price: Float
}

# order by stddev_samp() on columns of table "order_item"
input order_item_stddev_samp_order_by {
  price: order_by
}

# aggregate sum on columns
type order_item_sum_fields {
  price: numeric
}

# order by sum() on columns of table "order_item"
input order_item_sum_order_by {
  price: order_by
}

# update columns of table "order_item"
enum order_item_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  order_id

  # column name
  price

  # column name
  product_id

  # column name
  updated_at

  # column name
  user_id
}

# aggregate var_pop on columns
type order_item_var_pop_fields {
  price: Float
}

# order by var_pop() on columns of table "order_item"
input order_item_var_pop_order_by {
  price: order_by
}

# aggregate var_samp on columns
type order_item_var_samp_fields {
  price: Float
}

# order by var_samp() on columns of table "order_item"
input order_item_var_samp_order_by {
  price: order_by
}

# aggregate variance on columns
type order_item_variance_fields {
  price: Float
}

# order by variance() on columns of table "order_item"
input order_item_variance_order_by {
  price: order_by
}

# columns and relationships of "orders"
type orders {
  address: String!
  created_at: timestamptz!
  id: uuid!
  updated_at: timestamptz!
  user_id: uuid!
}

# aggregated selection of "orders"
type orders_aggregate {
  aggregate: orders_aggregate_fields
  nodes: [orders!]!
}

# aggregate fields of "orders"
type orders_aggregate_fields {
  count(columns: [orders_select_column!], distinct: Boolean): Int
  max: orders_max_fields
  min: orders_min_fields
}

# order by aggregate values of table "orders"
input orders_aggregate_order_by {
  count: order_by
  max: orders_max_order_by
  min: orders_min_order_by
}

# input type for inserting array relation for remote table "orders"
input orders_arr_rel_insert_input {
  data: [orders_insert_input!]!
  on_conflict: orders_on_conflict
}

# Boolean expression to filter rows from the table "orders". All fields are combined with a logical 'AND'.
input orders_bool_exp {
  _and: [orders_bool_exp]
  _not: orders_bool_exp
  _or: [orders_bool_exp]
  address: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

# unique or primary key constraints on table "orders"
enum orders_constraint {
  # unique or primary key constraint
  orders_pkey
}

# input type for inserting data into table "orders"
input orders_insert_input {
  address: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# aggregate max on columns
type orders_max_fields {
  address: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# order by max() on columns of table "orders"
input orders_max_order_by {
  address: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

# aggregate min on columns
type orders_min_fields {
  address: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# order by min() on columns of table "orders"
input orders_min_order_by {
  address: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

# response of any mutation on the table "orders"
type orders_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [orders!]!
}

# input type for inserting object relation for remote table "orders"
input orders_obj_rel_insert_input {
  data: orders_insert_input!
  on_conflict: orders_on_conflict
}

# on conflict condition type for table "orders"
input orders_on_conflict {
  constraint: orders_constraint!
  update_columns: [orders_update_column!]!
  where: orders_bool_exp
}

# ordering options when selecting data from "orders"
input orders_order_by {
  address: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

# primary key columns input for table: "orders"
input orders_pk_columns_input {
  id: uuid!
}

# select columns of table "orders"
enum orders_select_column {
  # column name
  address

  # column name
  created_at

  # column name
  id

  # column name
  updated_at

  # column name
  user_id
}

# input type for updating data in table "orders"
input orders_set_input {
  address: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

# update columns of table "orders"
enum orders_update_column {
  # column name
  address

  # column name
  created_at

  # column name
  id

  # column name
  updated_at

  # column name
  user_id
}

# columns and relationships of "products"
type products {
  created_at: timestamptz!
  id: uuid!
  name: String!
  price: numeric!
  stock_avilable: Int!
  updated_at: timestamptz!
}

# aggregated selection of "products"
type products_aggregate {
  aggregate: products_aggregate_fields
  nodes: [products!]!
}

# aggregate fields of "products"
type products_aggregate_fields {
  avg: products_avg_fields
  count(columns: [products_select_column!], distinct: Boolean): Int
  max: products_max_fields
  min: products_min_fields
  stddev: products_stddev_fields
  stddev_pop: products_stddev_pop_fields
  stddev_samp: products_stddev_samp_fields
  sum: products_sum_fields
  var_pop: products_var_pop_fields
  var_samp: products_var_samp_fields
  variance: products_variance_fields
}

# order by aggregate values of table "products"
input products_aggregate_order_by {
  avg: products_avg_order_by
  count: order_by
  max: products_max_order_by
  min: products_min_order_by
  stddev: products_stddev_order_by
  stddev_pop: products_stddev_pop_order_by
  stddev_samp: products_stddev_samp_order_by
  sum: products_sum_order_by
  var_pop: products_var_pop_order_by
  var_samp: products_var_samp_order_by
  variance: products_variance_order_by
}

# input type for inserting array relation for remote table "products"
input products_arr_rel_insert_input {
  data: [products_insert_input!]!
  on_conflict: products_on_conflict
}

# aggregate avg on columns
type products_avg_fields {
  price: Float
  stock_avilable: Float
}

# order by avg() on columns of table "products"
input products_avg_order_by {
  price: order_by
  stock_avilable: order_by
}

# Boolean expression to filter rows from the table "products". All fields are combined with a logical 'AND'.
input products_bool_exp {
  _and: [products_bool_exp]
  _not: products_bool_exp
  _or: [products_bool_exp]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  price: numeric_comparison_exp
  stock_avilable: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "products"
enum products_constraint {
  # unique or primary key constraint
  products_pkey
}

# input type for incrementing integer column in table "products"
input products_inc_input {
  price: numeric
  stock_avilable: Int
}

# input type for inserting data into table "products"
input products_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  price: numeric
  stock_avilable: Int
  updated_at: timestamptz
}

# aggregate max on columns
type products_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  price: numeric
  stock_avilable: Int
  updated_at: timestamptz
}

# order by max() on columns of table "products"
input products_max_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  price: order_by
  stock_avilable: order_by
  updated_at: order_by
}

# aggregate min on columns
type products_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  price: numeric
  stock_avilable: Int
  updated_at: timestamptz
}

# order by min() on columns of table "products"
input products_min_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  price: order_by
  stock_avilable: order_by
  updated_at: order_by
}

# response of any mutation on the table "products"
type products_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [products!]!
}

# input type for inserting object relation for remote table "products"
input products_obj_rel_insert_input {
  data: products_insert_input!
  on_conflict: products_on_conflict
}

# on conflict condition type for table "products"
input products_on_conflict {
  constraint: products_constraint!
  update_columns: [products_update_column!]!
  where: products_bool_exp
}

# ordering options when selecting data from "products"
input products_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  price: order_by
  stock_avilable: order_by
  updated_at: order_by
}

# primary key columns input for table: "products"
input products_pk_columns_input {
  id: uuid!
}

# select columns of table "products"
enum products_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  name

  # column name
  price

  # column name
  stock_avilable

  # column name
  updated_at
}

# input type for updating data in table "products"
input products_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  price: numeric
  stock_avilable: Int
  updated_at: timestamptz
}

# aggregate stddev on columns
type products_stddev_fields {
  price: Float
  stock_avilable: Float
}

# order by stddev() on columns of table "products"
input products_stddev_order_by {
  price: order_by
  stock_avilable: order_by
}

# aggregate stddev_pop on columns
type products_stddev_pop_fields {
  price: Float
  stock_avilable: Float
}

# order by stddev_pop() on columns of table "products"
input products_stddev_pop_order_by {
  price: order_by
  stock_avilable: order_by
}

# aggregate stddev_samp on columns
type products_stddev_samp_fields {
  price: Float
  stock_avilable: Float
}

# order by stddev_samp() on columns of table "products"
input products_stddev_samp_order_by {
  price: order_by
  stock_avilable: order_by
}

# aggregate sum on columns
type products_sum_fields {
  price: numeric
  stock_avilable: Int
}

# order by sum() on columns of table "products"
input products_sum_order_by {
  price: order_by
  stock_avilable: order_by
}

# update columns of table "products"
enum products_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  name

  # column name
  price

  # column name
  stock_avilable

  # column name
  updated_at
}

# aggregate var_pop on columns
type products_var_pop_fields {
  price: Float
  stock_avilable: Float
}

# order by var_pop() on columns of table "products"
input products_var_pop_order_by {
  price: order_by
  stock_avilable: order_by
}

# aggregate var_samp on columns
type products_var_samp_fields {
  price: Float
  stock_avilable: Float
}

# order by var_samp() on columns of table "products"
input products_var_samp_order_by {
  price: order_by
  stock_avilable: order_by
}

# aggregate variance on columns
type products_variance_fields {
  price: Float
  stock_avilable: Float
}

# order by variance() on columns of table "products"
input products_variance_order_by {
  price: order_by
  stock_avilable: order_by
}

# query root
type query_root {
  # fetch data from the table: "carts"
  carts(
    # distinct select on columns
    distinct_on: [carts_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [carts_order_by!]

    # filter the rows returned
    where: carts_bool_exp
  ): [carts!]!

  # fetch aggregated fields from the table: "carts"
  carts_aggregate(
    # distinct select on columns
    distinct_on: [carts_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [carts_order_by!]

    # filter the rows returned
    where: carts_bool_exp
  ): carts_aggregate!

  # fetch data from the table: "carts" using primary key columns
  carts_by_pk(id: uuid!): carts

  # fetch data from the table: "order_item"
  order_item(
    # distinct select on columns
    distinct_on: [order_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [order_item_order_by!]

    # filter the rows returned
    where: order_item_bool_exp
  ): [order_item!]!

  # fetch aggregated fields from the table: "order_item"
  order_item_aggregate(
    # distinct select on columns
    distinct_on: [order_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [order_item_order_by!]

    # filter the rows returned
    where: order_item_bool_exp
  ): order_item_aggregate!

  # fetch data from the table: "order_item" using primary key columns
  order_item_by_pk(id: uuid!): order_item

  # fetch data from the table: "orders"
  orders(
    # distinct select on columns
    distinct_on: [orders_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [orders_order_by!]

    # filter the rows returned
    where: orders_bool_exp
  ): [orders!]!

  # fetch aggregated fields from the table: "orders"
  orders_aggregate(
    # distinct select on columns
    distinct_on: [orders_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [orders_order_by!]

    # filter the rows returned
    where: orders_bool_exp
  ): orders_aggregate!

  # fetch data from the table: "orders" using primary key columns
  orders_by_pk(id: uuid!): orders

  # fetch data from the table: "products"
  products(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): [products!]!

  # fetch aggregated fields from the table: "products"
  products_aggregate(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): products_aggregate!

  # fetch data from the table: "products" using primary key columns
  products_by_pk(id: uuid!): products

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: uuid!): users
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "carts"
  carts(
    # distinct select on columns
    distinct_on: [carts_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [carts_order_by!]

    # filter the rows returned
    where: carts_bool_exp
  ): [carts!]!

  # fetch aggregated fields from the table: "carts"
  carts_aggregate(
    # distinct select on columns
    distinct_on: [carts_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [carts_order_by!]

    # filter the rows returned
    where: carts_bool_exp
  ): carts_aggregate!

  # fetch data from the table: "carts" using primary key columns
  carts_by_pk(id: uuid!): carts

  # fetch data from the table: "order_item"
  order_item(
    # distinct select on columns
    distinct_on: [order_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [order_item_order_by!]

    # filter the rows returned
    where: order_item_bool_exp
  ): [order_item!]!

  # fetch aggregated fields from the table: "order_item"
  order_item_aggregate(
    # distinct select on columns
    distinct_on: [order_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [order_item_order_by!]

    # filter the rows returned
    where: order_item_bool_exp
  ): order_item_aggregate!

  # fetch data from the table: "order_item" using primary key columns
  order_item_by_pk(id: uuid!): order_item

  # fetch data from the table: "orders"
  orders(
    # distinct select on columns
    distinct_on: [orders_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [orders_order_by!]

    # filter the rows returned
    where: orders_bool_exp
  ): [orders!]!

  # fetch aggregated fields from the table: "orders"
  orders_aggregate(
    # distinct select on columns
    distinct_on: [orders_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [orders_order_by!]

    # filter the rows returned
    where: orders_bool_exp
  ): orders_aggregate!

  # fetch data from the table: "orders" using primary key columns
  orders_by_pk(id: uuid!): orders

  # fetch data from the table: "products"
  products(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): [products!]!

  # fetch aggregated fields from the table: "products"
  products_aggregate(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): products_aggregate!

  # fetch data from the table: "products" using primary key columns
  products_by_pk(id: uuid!): products

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: uuid!): users
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

# columns and relationships of "users"
type users {
  created_at: timestamptz!
  email: String!
  id: uuid!
  name: String!
  updated_at: timestamptz!
}

# aggregated selection of "users"
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

# aggregate fields of "users"
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

# order by aggregate values of table "users"
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

# input type for inserting array relation for remote table "users"
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

# Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "users"
enum users_constraint {
  # unique or primary key constraint
  users_pkey
}

# input type for inserting data into table "users"
input users_insert_input {
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  updated_at: timestamptz
}

# aggregate max on columns
type users_max_fields {
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  updated_at: timestamptz
}

# order by max() on columns of table "users"
input users_max_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

# aggregate min on columns
type users_min_fields {
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  updated_at: timestamptz
}

# order by min() on columns of table "users"
input users_min_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

# response of any mutation on the table "users"
type users_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [users!]!
}

# input type for inserting object relation for remote table "users"
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

# on conflict condition type for table "users"
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

# ordering options when selecting data from "users"
input users_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

# primary key columns input for table: "users"
input users_pk_columns_input {
  id: uuid!
}

# select columns of table "users"
enum users_select_column {
  # column name
  created_at

  # column name
  email

  # column name
  id

  # column name
  name

  # column name
  updated_at
}

# input type for updating data in table "users"
input users_set_input {
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  updated_at: timestamptz
}

# update columns of table "users"
enum users_update_column {
  # column name
  created_at

  # column name
  email

  # column name
  id

  # column name
  name

  # column name
  updated_at
}

scalar uuid

# expression to compare columns of type uuid. All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

